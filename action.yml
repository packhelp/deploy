name: "Deploy Packhelp app"
description: "Deploy via helm to a Kubernetes cluster"
inputs:
  app:
    description: "Application to deploy"
    required: true
  env:
    description: "Environment (staging, production)"
    required: true
  chart_path:
    description: "Custom helm chart directory path"
    default: "helm-chart"
    required: false
  kubeconfig_pr:
    description: "Kubeconfig for PR cluster"
    required: false
  kubeconfig_np:
    description: "Kubeconfig for NP cluster"
    required: false

runs:
  using: "composite"
  steps:
    - name: Print inputs
      shell: bash
      run: |
        # Debug input values
        echo "[INFO] app: ${{ inputs.app }}"
        echo "[INFO] env: ${{ inputs.env }}"
        echo "[INFO] cluster: ${{ inputs.cluster }}"
        echo "[INFO] chart_path: ${{ inputs.chart_path }}"

    - name: Set base helm parameters
      shell: bash
      run: |
        # Setting base helm parameters..
        env="${{ inputs.env }}"
        app="${{ inputs.app }}"
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
        echo "ENV=$env" >> $GITHUB_ENV
        echo "CHART_PATH=${{ inputs.chart_path }}" >> $GITHUB_ENV
        echo "HELM_RELEASE=app-$app-$env" >> $GITHUB_ENV
        echo "NAMESPACE=app-$app-$env" >> $GITHUB_ENV

    - name: Check for envs.yaml file, set up cluster and values file
      shell: bash
      run: |
        # Checking envs.yaml config and setting up cluster and values file..
        envs_file="envs.yaml"
        if [ -f $CHART_PATH/$envs_file ]; then
          echo "[INFO] File $envs_file exists.."
        else
          echo "[ERROR] File $envs_file does not exist. Please create $envs_file file in $CHART_PATH.."
          echo "[ERROR] Example: https://gist.github.com/awinecki/bdfc59bba671e947bf511122cb8a8a7e"
        fi
        
        cluster=$(cat $CHART_PATH/$envs_file | yq .$ENV.cluster)
        values_file=$(cat $CHART_PATH/$envs_file | yq .$ENV.values)

        if [[ $cluster == "null" ]]; then
          echo "[INFO] Env not found in $envs_file. Using default cluster.."
          cluster=$(cat $CHART_PATH/$envs_file | yq .default.cluster)
        fi
        if [[ $values_file == "null" ]]; then
          echo "[INFO] Env not found in $envs_file. Using default values file.."
          values_file=$(cat $CHART_PATH/$envs_file | yq .default.values)
        fi

        echo "CLUSTER=$cluster" >> $GITHUB_ENV
        echo "VALUES_FILE=$values_file" >> $GITHUB_ENV

    - name: Set ref slug and chart ref slug
      shell: bash
      run: |
        # Setting ref slug and chart ref slug..
        ref="${{ github.ref_name || github.event.release.tag_name }}"
        # Convert refs into slugs (allow . for ~v1.2.0)
        ref_slug=$(echo $ref \
          | tr '[:upper:]' '[:lower:]' \
          | sed -E 's/[^a-z0-9.]+/-/g' \
          | sed -E 's/^-+|-+$//g')
        echo "CHART_REF_SLUG=$ref_slug" >> $GITHUB_ENV
        echo "REF_SLUG=$ref_slug" >> $GITHUB_ENV

    - name: Set release version
      shell: bash
      run: |
        # Setting release version..
        # If ref name is SEMVER-like, use it for release version
        if [[ $REF_SLUG =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          release_version="$REF_SLUG"
        else
          release_version="$IMAGE_TAG"
        fi
        echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

    - name: Setup helm
      uses: azure/setup-helm@v4

    - name: Set k8s context to PR
      if: ${{ env.CLUSTER == 'pr' }}
      uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: "${{ inputs.kubeconfig_pr }}"

    - name: Set k8s context to NP
      if: ${{ env.CLUSTER == 'np' }}
      uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: "${{ inputs.kubeconfig_np }}"

    - name: Helm lint
      shell: bash
      run: |
        # Linting helm chart..
        helm lint --strict \
          --set image.tag="$IMAGE_TAG" \
          --set envName="$ENV" \
          --set env="$ENV" \
          --namespace="$NAMESPACE" \
          --values="$CHART_PATH/$VALUES_FILE" \
          $CHART_PATH 1>&2

    # TODO: what about this?
    # Must be after lint. Helm expects version and appVersion to follow strict SemVer
    # - name: Update helm chart appVersion to the deployed image sha
    #   shell: bash
    #   run: |
    #     # Updating helm cart version to REF_SLUG and RELEASE_VERSION..
    #     sed -i \
    #       "s/^version:.*$/version: $CHART_REF_SLUG/" $CHART_PATH/Chart.yaml
    #     sed -i \
    #       "s/^appVersion:.*$/appVersion: $RELEASE_VERSION/" $CHART_PATH/Chart.yaml
    #     echo "[INFO] Replaced Chart.yaml version to $REF_SLUG and appVersion to $RELEASE_VERSION.."

    - name: Helm deploy
      shell: bash
      run: |
        # Deploying helm chart..
        helm upgrade $HELM_RELEASE \
          $CHART_PATH \
          --values="$CHART_PATH/$VALUES_FILE" \
          --set image.tag="$IMAGE_TAG" \
          --set version="$RELEASE_VERSION" \
          --set envName="$ENV" \
          --set env="$ENV" \
          --namespace="$NAMESPACE" \
          --install --wait --atomic --create-namespace

    - name: Debug failed deployment
      if: failure()
      shell: bash
      run: |
        # Print logs of a failed deployment's pods and events
        PODS=$(kubectl get pods -n $NAMESPACE -o jsonpath="{.items[*].metadata.name}")
        for POD in $PODS; do
          echo "[DEBUG] Logs for pod $POD:"
          kubectl logs -n $NAMESPACE $POD --timestamps=true --prefix=true --ignore-errors --all-containers
        done
        
        echo "[DEBUG] Events (Warning) for namespace $NAMESPACE:"
        kubectl events -n $NAMESPACE --types=Warning
