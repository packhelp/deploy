name: 'Hello World'
description: 'Greet someone'
inputs:
  app:
    description: 'Application to deploy'
    required: true
  env:
    description: 'Environment (staging, production)'
    required: true
  cluster:
    description: 'K8s cluster to deploy to'
    required: true
  chart_path:
    description: 'Custom helm chart directory path'
    default: "helm-chart"
    required: false
  envs_with_values:
    description: 'Comma separated list of envs that have custom values.yaml files'
    required: false
  kubeconfig_pr:
    description: 'Kubeconfig for PR cluster'
    required: false
  kubeconfig_np:
    description: 'Kubeconfig for NP cluster'
    required: false
  # image_tag:
  #   description: 'Override image tag to deploy'
  #   required: false

runs:
  using: "composite"
  steps:
    - name: Print inputs
      shell: bash
      run: |
        # Debug input values
        echo "[INFO] app: ${{ inputs.app }}"
        echo "[INFO] env: ${{ inputs.env }}"
        echo "[INFO] cluster: ${{ inputs.cluster }}"
        echo "[INFO] chart_path: ${{ inputs.chart_path }}"
        echo "[INFO] envs_with_values: ${{ inputs.envs_with_values }}"

    - name: Set base helm parameters
      shell: bash
      run: |
        # Setting base helm parameters..
        env="${{ inputs.env }}"
        app="${{ inputs.app }}"
        echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV
        echo "ENV=$env" >> $GITHUB_ENV
        echo "CHART_PATH=${{ inputs.chart_path }}" >> $GITHUB_ENV
        echo "HELM_RELEASE=app-$app-$env" >> $GITHUB_ENV
        echo "NAMESPACE=app-$app-$env" >> $GITHUB_ENV

    - name: Set ref slug and chart ref slug
      shell: bash
      run: |
        # Setting ref slug and chart ref slug..
        ref="${{ github.ref_name || github.event.release.tag_name }}"
        # Convert refs into slugs (allow . for ~v1.2.0)
        ref_slug=$(echo $ref \
          | tr '[:upper:]' '[:lower:]' \
          | sed -E 's/[^a-z0-9.]+/-/g' \
          | sed -E 's/^-+|-+$//g')
        echo "CHART_REF_SLUG=$ref_slug" >> $GITHUB_ENV
        echo "REF_SLUG=$ref_slug" >> $GITHUB_ENV

    - name: Set release version
      shell: bash
      run: |
        # Setting release version..
        # If ref name is SEMVER-like, use it for release version
        if [[ $REF_SLUG =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          release_version="$REF_SLUG"
        else
          release_version="$IMAGE_TAG"
        fi
        echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

    - name: Set helm values
      shell: bash
      run: |
        # Setting helm values..
        # Use custom values yaml file if exists. Otherwise, use values.dev.yaml
        envs_with_values="${{ inputs.envs_with_values }}"
        envs_with_values_regex=${envs_with_values//,/|}
        if [[ "${ENV}" = @($envs_with_values_regex) ]]; then
          helm_values="values.$ENV.yaml"
        else
          helm_values="values.dev.yaml"
        fi
        echo "HELM_VALUES=$helm_values" >> $GITHUB_ENV

    - name: Helm lint [np]
      if: ${{ inputs.cluster == 'np' }}
      uses: WyriHaximus/github-action-helm3@v3
      with:
        kubeconfig: "${{ inputs.kubeconfig_np }}"
        exec: |
          echo "[INFO] Linting helm chart.."
          helm lint --strict \
            --set image.tag="$IMAGE_TAG" \
            --set envName="$ENV" \
            --set env="$ENV" \
            --namespace="$NAMESPACE" \
            --values="$CHART_PATH/$HELM_VALUES" \
            $CHART_PATH 1>&2

    - name: Helm lint [pr]
      if: ${{ inputs.cluster == 'pr' }}
      uses: WyriHaximus/github-action-helm3@v3
      with:
        kubeconfig: "${{ inputs.kubeconfig_pr }}"
        exec: |
          echo "[INFO] Linting helm chart.."
          helm lint --strict \
            --set image.tag="$IMAGE_TAG" \
            --set envName="$ENV" \
            --set env="$ENV" \
            --namespace="$NAMESPACE" \
            --values="$CHART_PATH/$HELM_VALUES" \
            $CHART_PATH 1>&2

    # Must be after lint. Helm expects version and appVersion to follow strict SemVer
    - name: Update helm chart appVersion to the deployed image sha
      shell: bash
      run: |
        # Updating helm cart version to REF_SLUG and RELEASE_VERSION..
        sed -i \
          "s/^version:.*$/version: $CHART_REF_SLUG/" $CHART_PATH/Chart.yaml
        sed -i \
          "s/^appVersion:.*$/appVersion: $RELEASE_VERSION/" $CHART_PATH/Chart.yaml
        echo "[INFO] Replaced Chart.yaml version to $REF_SLUG and appVersion to $RELEASE_VERSION.."

    - name: Helm deploy [np]
      if: ${{ inputs.cluster == 'np' }}
      uses: WyriHaximus/github-action-helm3@v3
      with:
        kubeconfig: "${{ inputs.kubeconfig_np }}"
        exec: |
          helm upgrade $HELM_RELEASE \
            $CHART_PATH \
            --values="$CHART_PATH/$HELM_VALUES" \
            --set image.tag="$IMAGE_TAG" \
            --set version="$RELEASE_VERSION" \
            --set envName="$ENV" \
            --set env="$ENV" \
            --namespace="$NAMESPACE" \
            --install --wait --atomic --create-namespace

    - name: Helm deploy [pr]
      if: ${{ inputs.cluster == 'pr' }}
      uses: WyriHaximus/github-action-helm3@v3
      with:
        kubeconfig: "${{ inputs.kubeconfig_pr }}"
        exec: |
          echo "[INFO] Deploying helm chart.."
          helm upgrade $HELM_RELEASE \
            $CHART_PATH \
            --values="$CHART_PATH/$HELM_VALUES" \
            --set image.tag="$IMAGE_TAG" \
            --set version="$RELEASE_VERSION" \
            --set envName="$ENV" \
            --set env="$ENV" \
            --namespace="$NAMESPACE" \
            --install --wait --atomic --create-namespace
